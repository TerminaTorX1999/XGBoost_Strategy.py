import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from ta.momentum import RSIIndicator
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# 1. Simulate or load your price data (replace this with your real price data)
np.random.seed(42)
dates = pd.date_range(start="2020-01-01", periods=1500)
prices = np.cumsum(np.random.randn(1500)) + 100  # Simulated price series
df = pd.DataFrame({"date": dates, "price": prices})
df.set_index("date", inplace=True)

# 2. Feature Engineering
df["20_ema"] = df["price"].ewm(span=20, adjust=False).mean()
df["rsi"] = RSIIndicator(close=df["price"], window=14).rsi()
df["returns"] = df["price"].pct_change()

# 3. Target variable: 1 if tomorrow's price is higher than today's
df["target"] = np.where(df["price"].shift(-1) > df["price"], 1, 0)

# 4. Drop NaNs
df.dropna(inplace=True)

# 5. Features and target split
features = df[["20_ema", "rsi", "returns"]]
target = df["target"]

# 6. Train/test split
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, shuffle=False)

# 7. XGBoost model
model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')
model.fit(X_train, y_train)

# 8. Predictions and Evaluation
y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# 9. Confusion Matrix
plt.figure(figsize=(5, 4))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt="d", cmap="Blues")
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.tight_layout()
plt.show()

# 10. Feature Importance Plot
importance_df = pd.DataFrame({
    "Feature": features.columns,
    "Importance": model.feature_importances_
})

plt.figure(figsize=(6, 4))
sns.barplot(data=importance_df, x="Feature", y="Importance", palette="viridis")
plt.title("XGBoost Feature Importance")
plt.tight_layout()
plt.show()